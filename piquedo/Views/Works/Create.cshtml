@model piquedo.Models.Work


@{
    ViewBag.Title = "Create";
}


<div style="background: #1581ee; bottom: 0; height: 100%; left: 0; position: absolute; right: 0; top: 0;">


    <div class="row" style="background: #1581ee; height: 200px; width: 100%;"></div>


    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        @Html.ValidationSummary(true, "", new {@class = "text-danger"})
        <div class="container">

            <div class="row">
                <div class="col-sm-12 col-md-10 col-lg-8 offset-lg-2 offset-md-1 offset-sm-0">


                    <div class="supercard postingCard">

                        <input placeholder="Title of the Listing" class="TitleInput" name="Work.Title" id="Work_Title"/>
                    </div>

                    <div class="supercard postingCard">

                        <textarea id="Work_Description" placeholder="Explain your Requirement" class="DescriptionInput" name="Work.Description"> </textarea>
                    </div>

                    <div class="supercard postingCard">

                        <div id="dvMap" class="MapView"> </div>
                        <input class="locationText" id="locationInput" name="Work.Location"/>
                    </div>


                    <div class="supercard postingCard">


                        <div class="fileUpload">

                            <input type="file" name="Images" class="form-control-file text-primary font-weight-bold" id="inputFile" onchange=" UploadFile(this) " accept="image/*" data-title="+">

                        </div>


                    </div>


                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">

                            <input id="Longitude" name="Work.Longitude" type="hidden" value="" />
                            <input id="Latitude" name="Work.Latitude" type="hidden" value=""/>
                            <input id="imgUrl" name="Work.imgUrl" type="hidden" value="" />

                            <input type="submit" value="Create" class="btn btn-default"/>
                        </div>
                    </div>


                    <div>
                        @Html.ActionLink("Back to List", "Index")
                    </div>


                </div>

            </div>

        </div>
    }


</div>

@*<div class="form-group">
        @Html.LabelFor(model => model.Title, new {@class = "control-label col-md-2"})
        <div class="col-md-10">
            @Html.EditorFor(model => model.Title, new {htmlAttributes = new {@class = "form-control"}})
            @Html.ValidationMessageFor(model => model.Title, "", new {@class = "text-danger"})
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Description, new {@class = "control-label col-md-2"})
        <div class="col-md-10">
            @Html.EditorFor(model => model.Description, new {htmlAttributes = new {@class = "form-control"}})
            @Html.ValidationMessageFor(model => model.Description, "", new {@class = "text-danger"})
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.Location, new {@class = "control-label col-md-2"})
        <div class="col-md-10">
            @Html.EditorFor(model => model.Location, new {htmlAttributes = new {@class = "form-control", @id = "locationInput"}})
            @Html.ValidationMessageFor(model => model.Location, "", new {@class = "text-danger"})
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.FromDate, new {@class = "control-label col-md-2"})
        <div class="col-md-10">
            @Html.EditorFor(model => model.FromDate, new {htmlAttributes = new {@class = "form-control"}})
            @Html.ValidationMessageFor(model => model.FromDate, "", new {@class = "text-danger"})
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Expiry, new {@class = "control-label col-md-2"})
        <div class="col-md-10">
            @Html.EditorFor(model => model.Expiry, new {htmlAttributes = new {@class = "form-control"}})
            @Html.ValidationMessageFor(model => model.Expiry, "", new {@class = "text-danger"})
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.WorkType, new {@class = "control-label col-md-2"})
        <div class="col-md-10">
            @Html.EditorFor(model => model.WorkType, new {htmlAttributes = new {@class = "form-control"}})
            @Html.ValidationMessageFor(model => model.WorkType, "", new {@class = "text-danger"})
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.SkillLevel, new {@class = "control-label col-md-2"})
        <div class="col-md-10">
            @Html.EditorFor(model => model.SkillLevel, new {htmlAttributes = new {@class = "form-control"}})
            @Html.ValidationMessageFor(model => model.SkillLevel, "", new {@class = "text-danger"})
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.WorkCategory, new {@class = "control-label col-md-2"})
        <div class="col-md-10">
            @Html.EditorFor(model => model.WorkCategory, new {htmlAttributes = new {@class = "form-control"}})
            @Html.ValidationMessageFor(model => model.WorkCategory, "", new {@class = "text-danger"})
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.AlternateContact, new {@class = "control-label col-md-2"})
        <div class="col-md-10">
            @Html.EditorFor(model => model.AlternateContact, new {htmlAttributes = new {@class = "form-control"}})
            @Html.ValidationMessageFor(model => model.AlternateContact, "", new {@class = "text-danger"})
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.RenumerationType, new {@class = "control-label col-md-2"})
        <div class="col-md-10">
            @Html.EditorFor(model => model.RenumerationType, new {htmlAttributes = new {@class = "form-control"}})
            @Html.ValidationMessageFor(model => model.RenumerationType, "", new {@class = "text-danger"})
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.RenumerationAmount, new {@class = "control-label col-md-2"})
        <div class="col-md-10">
            @Html.EditorFor(model => model.RenumerationAmount, new {htmlAttributes = new {@class = "form-control"}})
            @Html.ValidationMessageFor(model => model.RenumerationAmount, "", new {@class = "text-danger"})
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ImgUrl, new {@class = "control-label col-md-2"})
        <div class="col-md-10">
            @Html.EditorFor(model => model.ImgUrl, new {htmlAttributes = new {@class = "form-control"}})
            @Html.ValidationMessageFor(model => model.ImgUrl, "", new {@class = "text-danger"})
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Tags, new {@class = "control-label col-md-2"})
        <div class="col-md-10">
            @Html.EditorFor(model => model.Tags, new {htmlAttributes = new {@class = "form-control"}})
            @Html.ValidationMessageFor(model => model.Tags, "", new {@class = "text-danger"})
        </div>
    </div>*@


<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDCJVxdbYTt-fuaInkkAXsNpkwczrHkS8Q&sensor=false"></script>

<script type="text/javascript">

    /*
            document.getElementById('Latitude').value = 5;
            document.getElementById('Longitude').value = 5;
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function(p) {
                    var LatLng = new google.maps.LatLng(p.coords.latitude, p.coords.longitude); //new google.maps.LatLng(p.coords.latitude, p.coords.longitude);
                    if (p.coords.longitude != null) {
                        document.getElementById('Latitude').value = p.coords.latitude;
                        document.getElementById('Longitude').value = p.coords.longitude;

                    }


                    var mapOptions = {
                        center: LatLng,
                        zoom: 13,
                        mapTypeId: google.maps.MapTypeId.ROADMAP
                    };
                    var map = new google.maps.Map(document.getElementById("dvMap"), mapOptions);
                    var marker = new google.maps.Marker({
                        position: LatLng,
                        map: map,
                        title: "<div style = 'height:60px;width:200px'><b>Your location:</b><br />Latitude: " + p.coords.latitude + "<br />Longitude: " + p.coords.longitude
                    });
                    google.maps.event.addListener(marker, "click", function(e) {
                        var infoWindow = new google.maps.InfoWindow();
                        infoWindow.setContent(marker.title);
                        infoWindow.open(map, marker);
                    });
                });
            } else {
                alert('Geo Location feature is not supported in this browser.');
            }

            */


    var geocoder = new google.maps.Geocoder;
    var LatLng = new google.maps.LatLng(24.459848, 54.378409);
    document.getElementById("Latitude").value = LatLng.latitude;
    document.getElementById("Longitude").value = LatLng.longitude;

    var mapOptions = {
        center: LatLng,
        zoom: 13,
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        minzoom: 13,
    };
    var map = new google.maps.Map(document.getElementById("dvMap"), mapOptions);
    var marker = new google.maps.Marker({
        draggable: true,
        position: LatLng,
        visible: true,
        map: map,
        title: "<div style = 'height:60px;width:200px'><b>Your location:</b><br />Latitude: " + LatLng.latitude + "<br />Longitude: " + LatLng.longitude
    });


    google.maps.event.addListener(marker, "click", function(e) {
        var infoWindow = new google.maps.InfoWindow();
        infoWindow.setContent(marker.title);
        infoWindow.open(map, marker);
    });


    google.maps.event.addListener(marker, "dragend", function(e) {

        document.getElementById("Latitude").value = marker.getPosition().lat();
        document.getElementById("Longitude").value = marker.getPosition().lng();


        var temo = { lat: marker.getPosition().lat(), lng: marker.getPosition().lng() };
        geocoder.geocode({ 'location': temo }, function(results, status) {
            if (status === "OK") {
                if (results[1]) {
                    document.getElementById("locationInput").value = results[1].formatted_address;
                } else {
                    window.alert("No results found");
                }
            } else {

            }
        });


    });

    var textarea = document.getElementById("Work_Description");
    var heightLimit = 400; /* Maximum height: 200px */

    textarea.oninput = function() {
        textarea.style.height = ""; /* Reset the height*/
        textarea.style.height = Math.min(textarea.scrollHeight, heightLimit) + "px";
    };


    function UploadFile(e) {
        var fd = new FormData();

        //fd.append({name of you variable in ViewModel}, value)
        fd.append("file", e.files[0]);

        $.ajax({
            url: "/Works/UploadFiles",
            data: fd,
            processData: false,
            contentType: false,
            type: "POST",
            success: function(data) {
               // alert(data);
                document.getElementById("imgUrl").value = data;
                e.parentElement.style.backgroundImage = "url(" + data + ")";
                e.style.display = "none";
            }
        });
    }


</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}